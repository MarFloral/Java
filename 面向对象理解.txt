一.面向对象（面向过程） 
1. 面向对象 找对象（封装了过程）来干。 例如：洗衣服（洗衣机就是对象）。 
2. 面向对象思想特点 是一种更符合我们思想习惯的思想。 可以将复杂的事情简单化。 将我们从执行者变成了指挥者。角色发生了转换
3. 面向对象的开发 就是不断的创建对象，使用对象，指挥对象做事情。 
4. 面向对象的设计 其实就是在管理和维护对象之间的关系。 

二.面向对象 
1. 我们学Java的语言就是要把现实事物用语言来描述出来。 
2. 我们如何描述现实世界事物 属性：就是该事物的描述信息（事物身上的名字） 名词 行为：就是该事物能够做什么 动词 
3. Java中最基本的单位是类，Java中用类描述事物也是如此。 成员变量：就是事物的属性 成员方法：就是事物的行为
4. 定义类其实就是类的成员（成员变量和成员方法） 
成员变量：和以前定义的变量一样，只不过位置发生了变化，在类中，方法外。（局部变量位置在方法里面或 者方法的声明上） 
成员方法：和以前定义方法是一样的，只不过把static去掉了。
 描述事物：人（Person） 类的名字（Person） 
5. 如何创建对象 类名 对象名=new 类名(); 使用成员变量：对象名.成员变量 使用成员方法：对象名.成员方法 （. 的） 6. 类与对象的区别 类：是一组相关的属性和行为的集合 泛指 对象：是该类事物的具体体现 特指 类 Person 对象 p(张三20男) 具体的人就是对象 

三.创建对象的过程如何在内存中运行 
1.JVM java虚拟机 编译代码 .class(字节码文件) Java虚拟机 栈 堆 方法区 执行方法 进栈 堆是用来创建对象的 方法区是用来编译类的 方法执行结束后 弹栈 
2.面向对象 
2.1成员变量和局部变量的区别: 
a.在类中的位置不同 成员变量：在类中，方法外 局部变量：在方法定义中或者声明上 
b.在内存中的位置不同 成员变量：在堆内存中（成员变量属于对象，对象进堆内存） 局部变量：在栈内存中（局部变量属于方法，方法进栈内存） 
c.生命周期不同 成员变量：随着对象的创建而存在，随着对象的消失而消失 局部变量：随着方法的调用而存在，随着方法的调用完毕而消失 
d.初始化值不同 成员变量：有默认初始值 局部变量：没有默认初始值，必须定义，赋值，然后才能使用 注意事项： 局部变量和成员变量重名的问题，如果重名，就近原则 基本数据类型：byte short int long double char boolean 引用数据类型：数组 String Arrays Scanner 类 
3.面向对象（方法的形式参数是类没那个的时候如何调用） 方法的形式参数是一个类类型（引用数据类型），其实需要的就是该类的 对象 
4.面向对象（匿名对象） 没有名的对象就是匿名对象 好处：可以节省代码（某些时候） 弊端：赋值没有意义，匿名对象调用完毕就是垃圾。 

四.封装
 一.封装的概念 
1.概念.是指隐藏对象的属性和实现细节，仅对外提供公共访问方式 权限修饰词：private 私有的 private修饰的成员（成员变量、成员方法），只能在本类中被访问 封装的好处：隐藏实现细节，提供公共的访问方式，提高安全性 封装的原则：将不需要对外提供的内容都隐藏起来。把属性隐藏，提供公共方法对其访问（提供了对应的get、set方法） private仅仅是封装的一种体现形式，不能说封装就是私有。 例如：private String name; 
2.this关键字的使用 意义：代表当前对象的引用 作用：用来区分成员变量和局部变量重名 例如： public Person(String name){ this.name=name; } 
3.方法的重载（Overload）（掌握） 在同一个类里面，方法没那个相同，参数列表不一样，与返回值类型 无关。 例如：(同一个类中) Public void print( ){} Public int print(String str){} Public void print(Stirng str,int i){} 

二.构造方法 
1.概述：给对象的数据（属性）进行初始化 
2.构造方法的格式特点 
a.方法名与类名相同（大小写也要一致） 
b.没有返回值类型（void也没有） 
c.没有具体的返回值（return）
3.构造方法的重载 方法名相同，与返回值类型无关（构造方法没有返回值），只看参数列表
4.构造方法注意事项： 
a.如果我们没有给出构造方法，系统会自动提供一个无参构造 
b.如果我们写了有参构造方法，系统将不会自动提供无参构造 注意：这个时候，如果需要无参构造，必须自己给出，建议：永远自己给出无参构造方法 
5.创建对象执行的具体流程 Person p=new Person(); 
1）Person.class加载进内存
 2）声明一个Person的类型引用 p 
3）在堆内存创建对象 
4）给对象中属性进行默认初始化值 
5）属性进行显示初始化 
6.构造方法进栈，给对象的属性赋值，构造方法弹栈
 7.产生地址值，将对象的地址赋值给p 

三.面向对象（static关键字的概述） 
1.static关键字的特点
 1）随着类的加载而加载 
2）优先于对象存在 
3）被类的多个对象共享 
4）可以通过类名调用 （共性用静态，特性用非静态） 也可以通过对象名调用 建议用类名调用 静态修饰的内容一般我们称为：与类相关，类成员 
2.static的注意事项 
1）在静态方法中是没有this关键字的 静态是随着类的加载而加载，this是随着对象的创建而存在 静态比对象先存在。 2）静态方法只能访问静态的成员变量和静态成员方法。
 静态方法： 成员变量：只能访问静态变量 成员方法：只能访问静态成员方法和成员变量 非静态方法 成员变量：可以是静态的，也可以是非静态的 成员方法：可以是静态成员方法和成员变量，也可以是非静态成 员方法和成员变量 简单记：静态只能访问静态 
3.静态变量和成员变量的区别 
a.所属不同 静态变量属于类，所以也称为类变量 成员变量属于对象，所以也称为实例变量（对象变量） 
b.内存中的位置不同 静态变量存储于方法区的静态区 成员变量存储于堆内存 
c.内存出现时间不同 静态变量随着类的加载而加载，随着类的消失而消失 成员变量随着对象的创建而存在，随着对象的消失而消失 
d.调用不同 静态变量可以通过类名调用，也可以通过对象调用（建议类名调用） 成员变量只能通过对象名调用 
4.代码块的概述与分类 
a.在Java中{}括起来的就叫代码块。 
5.代码块的分类 （先静态代码块--->静态方法--->构造代码块--->方法--->局部代码块） 根据其位置和声明不同，可以分为：局部代码块，构造代码块，静态代码块。 
局部代码块：在方法中出现，限定变量生命周期，及早释放提高内存利用率 
构造代码块：在类中方法外出现，多个构造方法中相同的代码存放到一起， 每次调用构造器都会执行，并且在构造方法前执行 
静态代码块：在类中方法外出现，并且加上static修饰符 ，用于给类进行 初始化，在加载的时候就执行，并且只会执行一次，一般加载驱动（音 频文件、视频文件、图片文件） 
例如： public class Person { 
public Person(){} 
{ System.out.println("构造代码块！"); }
 static{ System.out.println("静态代码块"); } 

public static void main(String[] args){ { System.out.println("局部代码块"); } } }